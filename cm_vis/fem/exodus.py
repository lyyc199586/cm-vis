"""
Exodus File Reader for MOOSE-Generated Results
===============================================

This module provides the Exodus class for reading and processing exodus files
generated by MOOSE (Multiphysics Object Oriented Simulation Environment).
It wraps netCDF4 functionality to provide convenient access to mesh data,
time series, and variable information.

The implementation is inspired by Yan Zhan (2022) and provides support for
both single exodus files and time series of multiple files.

Classes
-------
Exodus : Main class for reading exodus file data

Notes
-----
Currently optimized for 2D meshes but includes basic 3D support.
"""

# a wrapper based on netCDF4 to read moose generated exodus files to numpy arrays
# partly inspired by Yan Zhan (2022)

import netCDF4
import glob
import numpy as np
import numpy.typing as npt


class Exodus:
    """
    IO handler for exodus files, optimized for 2D meshes.
    
    This class provides methods to read mesh information, time series data,
    and field variables from exodus files generated by MOOSE simulations.
    
    Parameters
    ----------
    file_dir : str
        Path to the exodus file or file pattern (e.g., "file.e" or "file.e*")
        
    Attributes
    ----------
    dir : str
        File directory or pattern used for initialization
        
    Examples
    --------
    >>> # Read a single exodus file
    >>> exo = Exodus("simulation.e")
    >>> time = exo.get_time()
    >>> verts, faces = exo.get_mesh()
    >>> 
    >>> # Read time series files
    >>> exo_series = Exodus("simulation.e*")
    >>> time_series = exo_series.get_time_series()
    """

    def __init__(self, file_dir):
        """
        Initialize the Exodus reader.
        
        Parameters
        ----------
        file_dir : str
            Path to exodus file or file pattern for time series
        """
        self.dir = file_dir

    def get_time(self) -> np.ndarray:
        """
        Get time series data from the exodus file.
        
        Returns
        -------
        np.ndarray
            Array of time values from the simulation
            
        Examples
        --------
        >>> exo = Exodus("simulation.e")
        >>> times = exo.get_time()
        >>> print(f"Simulation ran for {times[-1]} time units")
        """
        model = netCDF4.MFDataset(self.dir)
        time = np.ma.getdata(model.variables["time_whole"][:])

        model.close()
        return time

    def get_time_series(self) -> dict:
        """
        Read mesh information for time series files.
        
        Creates a mapping between time steps and corresponding files when
        using multiple exodus files (e.g., file_dir = "simulation.e*").
        
        Returns
        -------
        dict
            Dictionary mapping {filename: time_array} for each file in series
            
        Raises
        ------
        ValueError
            If not used with file pattern ending in ".e*"
            
        Examples
        --------
        >>> exo = Exodus("simulation.e*") 
        >>> series = exo.get_time_series()
        >>> for filename, times in series.items():
        ...     print(f"{filename}: {len(times)} time steps")
        """
        if self.dir.endswith(".e*"):
            pattern = f"{self.dir}"
            file_list = glob.glob(pattern)
            mesh_series = dict()
            for file in file_list:
                model = Exodus(file)
                time = model.get_time()
                mesh_series.update({f"{file}": time})
            return mesh_series
        else:
            raise ValueError("get_time_series() only works for series of files!")

    def get_block_info(self) -> tuple[int, list]:
        """
        Get block information from the exodus file.
        
        Returns
        -------
        tuple of (int, list)
            - Number of element blocks
            - List of block names
            
        Examples
        --------
        >>> exo = Exodus("simulation.e")
        >>> num_blocks, block_names = exo.get_block_info()
        >>> print(f"Found {num_blocks} blocks: {block_names}")
        """
        model = netCDF4.MFDataset(self.dir)
        num_blocks = model.dimensions["num_el_blk"].size
        names = []
        for block_id in range(num_blocks):
            name_raw = np.ma.getdata(model.variables["eb_names"][block_id]).astype("U8")
            name = "".join(name_raw)
            names.append(name)

        model.close()
        return (num_blocks, names)

    def get_mesh(self, block_id=0, tstep=0) -> tuple[np.ndarray, np.ndarray]:
        """
        Read mesh coordinates and connectivity for a specific block and time step.
        
        This method extracts vertex coordinates and element connectivity from
        the exodus file. For time series files, it automatically finds the
        correct file for the requested time step.
        
        Parameters
        ----------
        block_id : int, optional
            Element block ID to read (default: 0)
        tstep : int, optional  
            Time step index (default: 0)
            
        Returns
        -------
        tuple of (np.ndarray, np.ndarray)
            - verts: Vertex coordinates array of shape (n_nodes, n_dims)
            - faces: Element connectivity array of shape (n_elements, nodes_per_element)
            
        Raises
        ------
        ValueError
            If mesh file at specified time step is not found
            
        Examples
        --------
        >>> exo = Exodus("simulation.e")
        >>> vertices, elements = exo.get_mesh(block_id=0, tstep=10)
        >>> print(f"Mesh has {len(vertices)} nodes and {len(elements)} elements")
        """
        if self.dir.endswith(".e*"):
            # find mesh file at tstep
            t = self.get_time()
            mesh_series = self.get_time_series()
            mesh_dir = None
            for key, t_list in mesh_series.items():
                if t[tstep] in t_list:
                    mesh_dir = key
                    break
            if mesh_dir is None:
                raise ValueError("Mesh file at tstep not found!")
        else:
            mesh_dir = self.dir

        model = netCDF4.Dataset(mesh_dir)

        # get model info
        dim = model.dimensions["num_dim"].size

        # get coords
        if dim == 2:
            x_coord = np.ma.getdata(model.variables["coordx"][:])
            y_coord = np.ma.getdata(model.variables["coordy"][:])
            verts = np.column_stack([x_coord, y_coord])
        else:
            x_coord = np.ma.getdata(model.variables["coordx"][:])
            y_coord = np.ma.getdata(model.variables["coordy"][:])
            z_coord = np.ma.getdata(model.variables["coordz"][:])
            verts = np.column_stack([x_coord, y_coord, z_coord])

        # get connect matrix
        faces = (
            np.ma.getdata(model.variables[f"connect{block_id + 1}"][:]) - 1
        )  # index start from 0

        model.close()
        return (verts, faces)

    def get_var(self, var_name, timestep=0) -> np.ndarray:
        """
        Get field variable data for a specific variable name and time step.
        
        This method retrieves nodal or elemental variable data from the exodus
        file. It automatically determines the variable type and location.
        
        Parameters
        ----------
        var_name : str
            Name of the variable to retrieve
        timestep : int, optional
            Time step index to read (default: 0)
            
        Returns
        -------
        np.ndarray or None
            Variable values array, or None if variable not found
            
        Notes
        -----
        The method automatically handles time series files by finding the
        correct file and local time step for the requested global time step.
        
        Examples
        --------
        >>> exo = Exodus("simulation.e")
        >>> displacement = exo.get_var("displacement_x", timestep=50)
        >>> temperature = exo.get_var("temperature", timestep=50)
        """
        if self.dir.endswith(".e*"):
            # find local time step and mesh file
            t = self.get_time()
            mesh_series = self.get_time_series()
            mesh_dir = None
            tstep = None
            for key, t_list in mesh_series.items():
                if t[timestep] in t_list:
                    mesh_dir = key
                    tstep = np.where(t_list == t[timestep])[0][0]
                    break
            if mesh_dir is None:
                raise ValueError("Mesh file at timestep not found!")
        else:
            mesh_dir = self.dir
            tstep = timestep

        def get_var_names(model, key="name_nod_var"):
            """
            Get variable names from exodus file.
            
            Parameters
            ----------
            model : netCDF4.Dataset
                Open netCDF dataset
            key : str
                Variable key ('name_nod_var' for nodal, 'name_elem_var' for elemental)
                
            Returns
            -------
            list
                List of variable names
            """
            var_names = []
            for vname in np.ma.getdata(model.variables[key][:]).astype("U8"):
                var_names.append("".join(vname))
            return var_names

        model = netCDF4.Dataset(mesh_dir)
        nod_var_names = get_var_names(model, "name_nod_var")
        elem_var_names = get_var_names(model, "name_elem_var")

        # get variable
        if var_name in nod_var_names:
            var_index = nod_var_names.index(var_name)
            vals = model.variables[f"vals_nod_var{var_index+1}"][:][tstep]
        elif var_name in elem_var_names:
            var_index = elem_var_names.index(var_name)
            vals = model.variables[f"vals_elem_var{var_index+1}eb1"][:][tstep]
        else:
            print("No such variable!")
            return None

        model.close()
        return vals
